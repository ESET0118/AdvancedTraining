@{
    ViewData["Title"] = "Students";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Students</h2>
        <button class="btn btn-success" id="addStudentBtn">
            <i class="bi bi-plus-lg"></i> Add Student
        </button>
    </div>

    <!-- Dropdown to select a student -->
    <div class="mb-3 d-flex align-items-center">
        <label for="studentSelect" class="me-2">Select Student:</label>
        <select id="studentSelect" class="form-select w-auto">
            <option value="">-- All Students --</option>
        </select>
    </div>

    <div id="students"></div>
    <div id="message" class="text-center mt-3"></div>

    <!-- Pagination -->
    <div class="d-flex justify-content-center mt-3">
        <nav>
            <ul class="pagination" id="pagination"></ul>
        </nav>
    </div>
</div>

<!-- Bootstrap Modal for Add/Edit -->
<div class="modal fade" id="studentModal" tabindex="-1" aria-labelledby="studentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title" id="studentModalLabel">Student</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <div class="modal-body">
                <input type="hidden" id="editStudentId">

                <div class="mb-3">
                    <label for="editRollNumber" class="form-label">Roll Number</label>
                    <input type="text" class="form-control" id="editRollNumber">
                </div>

                <div class="mb-3">
                    <label for="editName" class="form-label">Name</label>
                    <input type="text" class="form-control" id="editName">
                </div>

                <div class="mb-3">
                    <label for="editEmail" class="form-label">Email</label>
                    <input type="email" class="form-control" id="editEmail">
                </div>

                <div class="mb-3">
                    <label for="editPhone" class="form-label">Phone</label>
                    <input type="text" class="form-control" id="editPhone">
                </div>

                <div class="mb-3">
                    <label for="editAddress" class="form-label">Address</label>
                    <input type="text" class="form-control" id="editAddress">
                </div>

                <div class="mb-3">
                    <label for="editDateOfBirth" class="form-label">Date of Birth</label>
                    <input type="date" class="form-control" id="editDateOfBirth">
                </div>

                <div class="mb-3">
                    <label for="editGender" class="form-label">Gender</label>
                    <input type="text" class="form-control" id="editGender">
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveStudentBtn">Save</button>
            </div>

        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    const token = localStorage.getItem("jwtToken");
    let studentsData = [];
    let currentPage = 1;
    const pageSize = 5;
    const studentModal = new bootstrap.Modal(document.getElementById('studentModal'));

    // Load students
    function loadStudents() {
        $.ajax({
            url: "https://localhost:7197/api/Student",
            type: "GET",
            headers: { "Authorization": "Bearer " + token },
            success: function (data) {
                studentsData = data;
                populateStudentDropdown(); // populate dropdown
                currentPage = 1;
                renderStudentsPage(currentPage);
                renderPagination();
            },
            error: function () {
                $("#message").removeClass("text-success").addClass("text-danger")
                    .text("Failed to load students.");
            }
        });
    }

    // Populate dropdown with all student names
    function populateStudentDropdown() {
        let optionsHtml = `<option value="">-- All Students --</option>`;
        studentsData.forEach(s => {
            optionsHtml += `<option value="${s.studentId}">${s.name}</option>`;
        });
        $("#studentSelect").html(optionsHtml);
    }

    // Handle dropdown selection
    $("#studentSelect").change(function() {
        const selectedId = $(this).val();
        if (selectedId) {
            const selectedStudent = studentsData.filter(s => s.studentId == selectedId);
            renderStudents(selectedStudent);
            $("#pagination").html(""); // hide pagination
        } else {
            currentPage = 1;
            renderStudentsPage(currentPage);
            renderPagination();
        }
    });

    // Render table for current page
    function renderStudentsPage(page) {
        const start = (page - 1) * pageSize;
        const end = start + pageSize;
        renderStudents(studentsData.slice(start, end));
    }

    function renderStudents(data) {
        if (!data.length) {
            $("#students").html("<div class='text-muted text-center'>No students found.</div>");
            return;
        }

        let html = `<table class='table table-hover text-center'>
                        <thead class='table-dark'>
                            <tr>
                                <th>ID</th>
                                <th>Roll</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Address</th>
                                <th>DOB</th>
                                <th>Gender</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>`;

        data.forEach(s => {
            html += `<tr>
                        <td>${s.studentId}</td>
                        <td>${s.rollNumber}</td>
                        <td>${s.name}</td>
                        <td>${s.email || ''}</td>
                        <td>${s.phone || ''}</td>
                        <td>${s.address || ''}</td>
                        <td>${s.dateOfBirth ? s.dateOfBirth.split('T')[0] : ''}</td>
                        <td>${s.gender || ''}</td>
                        <td>
                            <button class='btn btn-warning btn-sm' onclick='openEditModal(${JSON.stringify(s)})'>Edit</button>
                            <button class='btn btn-danger btn-sm' onclick='deleteStudent(${s.studentId})'>Delete</button>
                        </td>
                    </tr>`;
        });

        html += "</tbody></table>";
        $("#students").html(html);
    }

    // Render pagination buttons
    function renderPagination() {
        const totalPages = Math.ceil(studentsData.length / pageSize);
        if (totalPages <= 1) { $("#pagination").html(""); return; }

        let html = "";
        for (let i = 1; i <= totalPages; i++) {
            html += `<li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#">${i}</a>
                     </li>`;
        }
        $("#pagination").html(html);

        $("#pagination li a").click(function (e) {
            e.preventDefault();
            currentPage = parseInt($(this).text());
            renderStudentsPage(currentPage);
            renderPagination();
        });
    }

    // Open modal for add/edit
    function openEditModal(student = null) {
        if (student) {
            $("#studentModalLabel").text("Edit Student");
            $("#editStudentId").val(student.studentId);
            $("#editRollNumber").val(student.rollNumber);
            $("#editName").val(student.name);
            $("#editEmail").val(student.email || '');
            $("#editPhone").val(student.phone || '');
            $("#editAddress").val(student.address || '');
            $("#editDateOfBirth").val(student.dateOfBirth ? student.dateOfBirth.split('T')[0] : '');
            $("#editGender").val(student.gender || '');
        } else {
            $("#studentModalLabel").text("Add Student");
            $("#editStudentId").val('');
            $("#editRollNumber").val('');
            $("#editName").val('');
            $("#editEmail").val('');
            $("#editPhone").val('');
            $("#editAddress").val('');
            $("#editDateOfBirth").val('');
            $("#editGender").val('');
        }
        studentModal.show();
    }

    // Save Add/Edit
    $("#saveStudentBtn").click(function () {
        const studentId = $("#editStudentId").val();
        const studentData = {
            StudentId: studentId ? parseInt(studentId) : 0,
            RollNumber: $("#editRollNumber").val(),
            Name: $("#editName").val(),
            Email: $("#editEmail").val(),
            Phone: $("#editPhone").val(),
            Address: $("#editAddress").val(),
            DateOfBirth: $("#editDateOfBirth").val() || null,
            Gender: $("#editGender").val()
        };

        const method = studentId ? "PUT" : "POST";
        const url = "https://localhost:7197/api/Student" + (studentId ? "/" + studentId : "");

        $.ajax({
            url: url,
            type: method,
            contentType: "application/json",
            headers: { "Authorization": "Bearer " + token },
            data: JSON.stringify(studentData),
            success: function () {
                studentModal.hide();
                loadStudents();
            },
            error: function (xhr) {
                let errorText = "Failed to save student.";
                if (xhr.responseJSON) {
                    errorText += " " + JSON.stringify(xhr.responseJSON.errors);
                }
                $("#message").removeClass("text-success").addClass("text-danger").text(errorText);
            }
        });
    });

    // Delete student
    function deleteStudent(id) {
        if (!confirm("Are you sure to delete this student?")) return;
        $.ajax({
            url: "https://localhost:7197/api/Student/" + id,
            type: "DELETE",
            headers: { "Authorization": "Bearer " + token },
            success: function () { loadStudents(); },
            error: function () {
                $("#message").removeClass("text-success").addClass("text-danger")
                    .text("Failed to delete student.");
            }
        });
    }

    $("#addStudentBtn").click(() => openEditModal());

    $(document).ready(loadStudents);
</script>
